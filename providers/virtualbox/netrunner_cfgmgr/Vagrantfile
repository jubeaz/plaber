
#"StefanScherer/windows_10"
#"StefanScherer/windows_11"
#"StefanScherer/windows_2019"
#"gusztavvargadr/windows-10"
#"gusztavvargadr/windows-server-core"
#"gusztavvargadr/windows-server"
#"archlinux/archlinux"
# gusztavvargadr/windows-server-2022-standard
# gusztavvargadr/windows-server-2022-standard-core


Vagrant.configure("2") do |config|
  # Uncomment this depending on the provider you want to use
  ENV['VAGRANT_DEFAULT_PROVIDER'] = 'virtualbox'
  #ENV['VAGRANT_DEFAULT_PROVIDER'] = 'vmware_desktop'

  net_defs = { 
    weyland:  {name: "weyland",  mask: "255.255.255.0", network: "172.17.1.0", gw: "172.17.1.254"},
  	haas:     {name: "haas",     mask: "255.255.255.0", network: "172.17.2.0", gw: "172.17.2.254"},
  	research: {name: "research", mask: "255.255.255.0", network: "172.17.3.0", gw: "172.17.3.254"},
    bridge: {name: "br0", mask: "255.255.255.0", network: "192.168.10.0", gw: "192.168.10.254"}
#    bridge: {name: "br1", mask: "255.255.0.0", network: "192.168.58.0", gw: "192.168.2.1"}
  }

  boxes = [
    { 
      # deployment_type: "nat", # "routed" will exploit bridge interface anything else else will rely on NAT
      deployment_type: "routed", # "routed" will exploit bridge interface anything else else will rely on NAT
      bname: "nrunner_fw", 
    	nets: [
    		{
    			ip: "172.17.2.254",
          net: net_defs[:haas], 
    		},
    		{
    			ip: "172.17.1.254",
          net: net_defs[:weyland], 
    		},
    		{
    			ip: "172.17.3.254",
          net: net_defs[:research], 
    		}
    	],
      ip_p: "192.168.10.100",
      # box: "archlinux/archlinux", 
      # box_version: "20241001.267073", 
      box: "jubeaz-efi-archlinux-2025.05.28-x86_64",
      username: "jubeaz",
      password: "jubeaz",
      os: "arch", 
      ram: 1*1024,
      cpu: 1
    },
    { 
      # only internal
      bname: "nrunner_wld_dc", 
      ip: "172.17.1.1", 
  	  net: net_defs[:weyland], 
      #box: "gusztavvargadr/windows-server-core",
      box: "gusztavvargadr/windows-server",
      #box_version: "2102.0.2409",  
      os: "windows", 
      ram: 2*1024,
      #ram: 4*1024,
      cpu: 2
    },
    { 
      # internal and public
      bname: "nrunner_wld_srv01", 
      ip: "172.17.1.10", 
  	  net: net_defs[:weyland], 
      #box: "gusztavvargadr/windows-server-core",
      box: "gusztavvargadr/windows-server",
      #box_version: "2102.0.2409",  
      os: "windows", 
      #ram: 2*1024,
      ram: 4*1024,
      cpu: 2
    },
    { 
      # only internal
      bname: "nrunner_haas_dc", 
      ip: "172.17.2.1", 
  	  net: net_defs[:haas], 
      #box: "gusztavvargadr/windows-server-core",
      box: "gusztavvargadr/windows-server",
      #box_version: "2102.0.2409",  
      os: "windows", 
      ram: 2*1024,
      #ram: 4*1024,
      cpu: 2
    },
    { 
      # only internal
      bname: "nrunner_haas_srv01", 
      ip: "172.17.2.10", 
  	  net: net_defs[:haas], 
      #box: "gusztavvargadr/windows-server-core",
      box: "gusztavvargadr/windows-server",
      #box_version: "2102.0.2409",  
      os: "windows", 
      #ram: 2*1024,
      ram: 4*1024,
      cpu: 2
    },
    { 
      # only internal
      bname: "nrunner_haas_srv02", 
      ip: "172.17.2.11", 
  	  net: net_defs[:haas], 
      #box: "gusztavvargadr/windows-server-core",
      #ram: 2*1024,
      box: "gusztavvargadr/windows-server",
      #box_version: "2102.0.2409",  
      os: "windows",
      #ram: 2*1024,
      ram: 4*1024,
      cpu: 2
    },
#    { 
#      # only internal
#      bname: "nrunner_haas_srv03", 
#      ip: "172.17.2.12", 
#  	  net: net_defs[:haas], 
#      #box: "gusztavvargadr/windows-server-core",
#      #ram: 2*1024,
#      box: "gusztavvargadr/windows-server",
#      #box_version: "2102.0.2409",  
#      os: "windows", 
#      #ram: 2*1024,
#      ram: 4*1024,
#      cpu: 2
#    },
#    { 
#      # only internal
#      bname: "nrunner_haas_ws01", 
#      ip: "172.17.2.20", 
#  	  net: net_defs[:research], 
#      box: "gusztavvargadr/windows-11", 
#      #box_version: "2202.0.2409 ", 
#      os: "windows", 
#      #ram: 2*1024,
#      ram: 4*1024,
#      cpu: 2
#    },
    { 
      # only internal
      bname: "nrunner_rsc_dc", 
      ip: "172.17.3.1", 
  	  net: net_defs[:research], 
      #box: "gusztavvargadr/windows-server-core",
      box: "gusztavvargadr/windows-server",
      #box_version: "2102.0.2409",  
      os: "windows", 
      #ram: 2*1024,
      ram: 2*1024,
      cpu: 2
    },
    { 
      # only internal
      bname: "nrunner_rsc_srv01", 
      ip: "172.17.3.10", 
  	  net: net_defs[:research], 
      #box: "gusztavvargadr/windows-server-core",
      box: "gusztavvargadr/windows-server",
      #box_version: "2102.0.2409",  
      os: "windows", 
      #ram: 2*1024,
      ram: 4*1024,
      cpu: 2
    },
    { 
      # only internal
      bname: "nrunner_rsc_ws01", 
      ip: "172.17.3.20", 
  	  net: net_defs[:research], 
      box: "gusztavvargadr/windows-11", 
      #box_version: "2202.0.2409 ", 
      os: "windows", 
      #ram: 2*1024,
      ram: 4*1024,
      cpu: 2
    }
  ]

  # disable rdp forwarded port inherited from gusztavvargadr box
  #config.vm.network :forwarded_port, guest: 22, host: 2222, auto_correct: true, disabled: true
  #config.vm.network :forwarded_port, guest: 3389, host: 53389, auto_correct: true
  #config.vm.network :forwarded_port, guest: 5985, host: 55985, auto_correct: true, disabled: true
  #config.vm.network :forwarded_port, guest: 5986, host: 55986, auto_correct: true, disabled: true
  # no autoupdate if vagrant-vbguest is installed
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end
  config.vm.boot_timeout = 600
  config.vm.graceful_halt_timeout = 600
  config.winrm.retry_limit = 30
  config.winrm.retry_delay = 10
  config.winrm.transport = "plaintext"
  config.winrm.basic_auth_only = true
  config.ssh.insert_key = false
  config.ssh.username = "vagrant"
  config.ssh.password = "vagran"

  boxes.each do |box|
    config.vm.define box[:bname] do |target|
      #Â BOX
      if box.has_key?(:username)
        target.ssh.username = box[:username] 
      end
      if box.has_key?(:password)
        target.ssh.password = box[:password] 
      end
      target.ssh.insert_key = false  # prevent Vagrant from overriding the authorized_keys
      target.vm.provider "virtualbox" do |v|
        v.memory = box[:ram]
        v.name = box[:bname]
        #v.cpus = 2
        v.cpus = box[:cpu]
        if box[:os] == "windows_uefi"
          #v.customize ["modifyvm", :id, '--audio-driver', 'alsa', '--audio-controller', 'hda', '--audio-enabled', 'on']
          #v.customize ["modifyvm", :id, '--vram', '128']
          v.customize ["modifyvm", :id, '--nested-hw-virt', 'on']
          v.customize ["modifyvm", :id, '--firmware', 'efi64']
          v.customize ["modifynvram", :id, 'inituefivarstore']
          v.customize ["modifynvram", :id, 'enrollorclpk']
          v.customize ["modifynvram", :id, 'enrollmssignatures']
        end  
      end
      # Download image
      target.vm.box_download_insecure = box[:box]
      target.vm.box = box[:box]
      if box.has_key?(:box_version)
        target.vm.box_version = box[:box_version]
      end

      # issues/49
      target.vm.synced_folder '.', '/vagrant', disabled: true
      target.vm.synced_folder 'shared/', '/shared', disabled: true

      # Windows specific
      if box[:os] == "windows"
        target.vm.guest = :windows
        target.vm.communicator = "winrm"
        #config.vm.communicator = 'winrm'
        #config.winssh.shell = 'powershell'
      
        #  alway provision an INTERNAL network on Ethernet 2
        n_info = box[:net]
        target.vm.network :private_network, ip: box[:ip], virtualbox__intnet: n_info[:name]
        target.vm.provision :shell, :path => "../../scripts/all_in_one.ps1", privileged: false, args: ["-IFName", "Ethernet 2", "-IP", box[:ip], "-Mask", n_info[:mask], "-Gateway", n_info[:gw]]
        if box.has_key?(:ip_p)
          n_info_p = net_defs[:bridge]
          #  Provision a BRIDGED interface if needed on Ethernet 3 
          target.vm.network :public_network, bridge: n_info_p[:name], ip: box[:ip_p]
          target.vm.provision :shell, :path => "../../scripts/all_in_one.ps1", privileged: false, args: ["-IFName", "Ethernet 3", "-IP", box[:ip_p], "-Mask", n_info_p[:mask]]
        end
      end
      # Arch specific
      if box[:os] == "arch"
        # Provision a BRIDGED interface on eth1	
        n_info_p = net_defs[:bridge]
        target.vm.network :public_network, bridge: n_info_p[:name], ip: box[:ip_p]
        target.vm.communicator = "ssh"

        # Provision INTERNAL interfaces
        box[:nets].each do |bn|
          n_info = bn[:net]
          puts "  Provision Network #{n_info[:name]} with IP #{bn[:ip]}"
          target.vm.network :private_network, ip: bn[:ip], virtualbox__intnet: n_info[:name]
        end
        target.vm.provision :shell, :path => "../../scripts/arch_python.sh", privileged: true, args: ["France"]
        target.vm.provision :shell, :path => "../../scripts/fix_ip.sh", privileged: true, args: [box[:deployment_type], n_info_p[:gw]]
      end
      # Linux specific
      if box[:os] == "linux"
        target.vm.communicator = "ssh"
        #  alway provision an internal network on Ethernet 2
        n_info = box[:net]
        target.vm.network :private_network, ip: box[:ip], virtualbox__intnet: n_info[:name]
        target.vm.provision :shell, :path => "../../scripts/fix_ip_ubuntu.sh", privileged: true, args: [n_info[:gw]]
      end
      if box.has_key?(:forwarded_port)
        # forwarded port explicit
        box[:forwarded_port] do |forwarded_port|
          target.vm.network :forwarded_port, guest: forwarded_port[:guest], host: forwarded_port[:host], host_ip: "127.0.0.1", id: forwarded_port[:id]
        end
      end
    end
  end
end
