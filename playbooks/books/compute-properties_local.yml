---
#- name: Compute ansible_controller_ip for each network 
#  hosts: firewalls
#  become: true
#  max_fail_percentage: 0
#  become_user: root
#  tasks:
#    - name: Display hostvars in a readable format
#      ansible.builtin.debug:
#        var: hostvars[inventory_hostname]
#    - name: Create ansible_controller_ip
#      ansible.builtin.set_fact:
#        ansible_controller_ip: {}
#    - name: Display hostvars in a readable format
#      ansible.builtin.debug:
#        var: hostvars[inventory_hostname]['ansible_facts']

#    - name: Add ansible_controller_ip for each network (NAT Enabled)
#      ansible.builtin.set_fact:
#        ansible_controller_ip: "{{ ansible_controller_ip | combine( { hostvars[inventory_hostname]['ansible_facts'][item]['ipv4']['network']: hostvars[inventory_hostname]['ansible_facts'][item]['ipv4']['address'] } ) }}"
#      with_items: "{{ domains_interfaces }}"  
#      when: not hostvars['fw'].disable_nat
#
#    - name: Add ansible_controller_ip for each network (NAT Disabled)
#      ansible.builtin.set_fact:
#        ansible_controller_ip: "{{ ansible_controller_ip | combine( { hostvars[inventory_hostname]['ansible_facts'][item]['ipv4']['network']: ufw_in_ssh_allow } ) }}"
#      with_items: "{{ domains_interfaces }}"  
#      when: hostvars['fw'].disable_nat
#
#    - name: Print ansible_controller_ip
#      ansible.builtin.debug:
#        var: ansible_controller_ip


- name: "Compute LOCAL info on each host"
  hosts: domain
  max_fail_percentage: 0
  tasks:
#    - name: Display hostvars in a readable format
#      ansible.builtin.debug:
#        var: hostvars[inventory_hostname]
#    - name: STOP
#      ansible.builtin.fail:
#        msg: "STOP"

    - name: Check Product name
      ansible.windows.win_shell: |
        $ProductName = Get-ItemProperty -Path "HKLM:/Software/Microsoft/Windows NT/CurrentVersion" | Select-Object -ExpandProperty "ProductName"
        Return $ProductName
      register: product_name
      changed_when: false

    - name: Register is_server_os
      ansible.builtin.set_fact:
        is_server_os: "{{  product_name.stdout_lines[0] is search('Windows Server') }}"

    - name: Check InstallationType
      ansible.windows.win_shell: |
        $InstallationType = Get-ItemProperty -Path "HKLM:/Software/Microsoft/Windows NT/CurrentVersion" | Select-Object -ExpandProperty "InstallationType"
        Return $InstallationType -eq "Server Core"
      register: is_server_core
      changed_when: false

    - name: Register is_core_install
      ansible.builtin.set_fact:
        is_core_install: "{{ is_server_core.stdout_lines[0] }}"

    - name: Register ansible_controller_ip from firewall ufw_in_ssh_allow (NAT Disabled)
      ansible.builtin.set_fact:
        ansible_controller_ip: "{{ hostvars['fw'].ufw_in_ssh_allow }}"
      when: hostvars['fw'].disable_nat

#    - name: Display hostvars in a readable format
#      ansible.builtin.debug:
#        var: hostvars[inventory_hostname]
#    - name: STOP
#      ansible.builtin.fail:
#        msg: "STOP"


    - name: Register Domain interface definition 
      ansible.builtin.set_fact: 
        domaine_interface_def: "{{  hostvars[inventory_hostname]['ansible_facts']['interfaces'] | selectattr('connection_name', 'equalto', domain_adapter) | list }}"
      when: not hostvars['fw'].disable_nat

#    - name: Print domaine_interface_def
#      ansible.builtin.debug:
#        var: domaine_interface_def
#      when: not hostvars['fw'].disable_nat


    - name: Register ansible_controller_ip from Domain Interface default gateway (NAT Enabled)
      ansible.builtin.set_fact:
        ansible_controller_ip: "{{ domaine_interface_def[0]['default_gateway'] }}"
      when: not hostvars['fw'].disable_nat


    - name: Print ansible_controller_ip
      ansible.builtin.debug:
        var: ansible_controller_ip
