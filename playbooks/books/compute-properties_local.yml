---
- name: LOCAL SET FACTS
  hosts: domain
  tags: mandatory
  max_fail_percentage: 0
  gather_facts: true
  tasks:
#    - name: Display hostvars in a readable format
#      ansible.builtin.debug:
#        var: hostvars[inventory_hostname]
#      when: hostvars[inventory_hostname]["ansible_facts"]["hostname"] != hostname
#    - name: STOP
#      ansible.builtin.fail:
#        msg: "STOP"

#    - name: Check Product name
#      ansible.windows.win_shell: |
#        $ProductName = Get-ItemProperty -Path "HKLM:/Software/Microsoft/Windows NT/CurrentVersion" | Select-Object -ExpandProperty "ProductName"
#        Return $ProductName
#      register: product_name
#      changed_when: false

    - name: Register plbr_is_server_os (ansible_os_installation_type)
      ansible.builtin.set_fact:
        plbr_is_server_os: "{{ true if ansible_os_installation_type is search('Server') else false }}"
        cacheable: true

#    - name: Check InstallationType
#      ansible.windows.win_shell: |
#        $InstallationType = Get-ItemProperty -Path "HKLM:/Software/Microsoft/Windows NT/CurrentVersion" | Select-Object -ExpandProperty "InstallationType"
#        Return $InstallationType -eq "Server Core"
#      register: is_server_core
#      changed_when: false

    - name: Register plbr_is_core_install
      ansible.builtin.set_fact:
        plbr_is_core_install: "{{ true if ansible_os_installation_type is search('Core') else false }}"
        cacheable: true

    - name: Register domain interface definition
      ansible.builtin.set_fact:
        plbr_domaine_interface_def: "{{  hostvars[inventory_hostname]['ansible_facts']['interfaces'] | selectattr('connection_name', 'equalto', plbr_domain_adapter) | list }}"
        cacheable: true

    - name: Register plbr_ansible_controller_ip from firewall ufw_in_ssh_allow (NAT Disabled)
      ansible.builtin.set_fact:
        plbr_ansible_controller_ip: "{{ hostvars['fw'].ufw_in_ssh_allow }}"
        cacheable: true
      when: hostvars['fw'].disable_nat

    - name: Register plbr_ansible_controller_ip from Domain Interface default gateway (NAT Enabled)
      ansible.builtin.set_fact:
        plbr_ansible_controller_ip: "{{ domaine_interface_def[0]['default_gateway'] }}"
        cacheable: true
      when: not hostvars['fw'].disable_nat

    - name: Register plbr_domain_computers
      ansible.builtin.set_fact:
        plbr_domain_computers: "{{ plbr_domain_fake_computers | ansible.builtin.combine(plbr_domain_real_computers) }}"
        cacheable: true
      when: inventory_hostname in groups['dc']

    - name: Compute fake computers
      when: inventory_hostname in groups['dc']
      block:
        - name: Init missing computers
          ansible.builtin.set_fact:
            missing: "{{ {} }}"
        - name: Compute missing computers
          ansible.builtin.set_fact:
            missing: "{{ missing | ansible.builtin.combine({item.key: item.value}) }}"
          with_dict: "{{ plbr_domain_real_computers }}"
          when: item.value.inventory_key not in hostvars

        - name: Register plbr_domain_computers
          ansible.builtin.set_fact:
            plbr_domain_computers: "{{ plbr_domain_fake_computers | ansible.builtin.combine(missing) }}"
            cacheable: true

        - name: Debug plbr_domain_computers
          ansible.builtin.debug:
            var: plbr_domain_computers


#    - name: Compute windows config role variables
#      ansible.builtin.set_fact:
#        w_cfg_base_winrm_allow_ip: "{{ w_cfg_base_winrm_allow_ip | default([]) }} + {{ plbr_ansible_controller_ip }}"
#        w_cfg_base_rdp_allow_ip: "{{ w_cfg_base_winrm_allow_ip | default([]) }} + {{ plbr_ansible_controller_ip }}"
#        w_cfg_base_any_allow_ip: "{{ w_cfg_base_winrm_allow_ip | default([]) }} + {{ plbr_ansible_controller_ip }}"
#        w_cfg_hostname_name: "{{ plbr_hostname }}"
#        w_cfg_base_force_dns_server: "{{ plbr_force_dns_server }}"
#        w_cfg_base_dns_server: "{{ plbr_dns_server }}"
#        w_cfg_base_enable_http_proxy: "{{ plbr_enable_http_proxy }}"
#        w_cfg_base_http_proxy: "{{ plbr_http_proxy }}"
#        w_cfg_base_https_proxy: "{{ plbr_https_proxy }}"
#        w_cfg_base_two_adapters: "{{ plbr_two_adapters }}"
#        w_cfg_base_domain_adapter: "{{ plbr_domain_adapter }}"
#        w_cfg_lap_password: "{{ plbr_local_admin_password }}"
