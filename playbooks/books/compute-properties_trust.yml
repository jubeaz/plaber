---
- name: "Compute TRUST info on each host"
  hosts: trust
  tags: mandatory
  max_fail_percentage: 0
  tasks:
    - name: Compute trusted domain infos on DC
      ansible.builtin.set_fact:
        domain_trust_remote_dc_name: "{{ hostvars[trust_domain_dc_ansible_inventory_key].hostname }}"
        domain_trust_remote_dc_ip: "{{ hostvars[trust_domain_dc_ansible_inventory_key].domain_ip }}"
        domain_trust_remote_domain_name: "{{ hostvars[trust_domain_dc_ansible_inventory_key].domain_name }}"
        domain_trust_remote_domain_password: "{{ hostvars[trust_domain_dc_ansible_inventory_key].domain_password }}"
        cacheable: true

#    - name: print trused domain info
#       ansible.builtin.debug:
#        msg:
#          - "domain_trust_remote_dc_name: {{ domain_trust_remote_dc_name }}"
#          - "domain_trust_remote_dc_ip: {{ domain_trust_remote_dc_ip }}"
#          - "domain_trust_remote_domain_name: {{ domain_trust_remote_domain_name }}"
#          - "domain_trust_remote_domain_password: {{ domain_trust_remote_domain_password }}"
#          - "domain_name: {{ domain_name }}"

    - name: Compute transitive trusted domains
      # no_log: true
      ansible.builtin.set_fact:
        transitive_trusts_domains: "{{ transitive_trusts_domains | default([]) + [[item.value.domain_ip, item.value.domain_name]] }}"
      with_dict: "{{ hostvars }}"
      when: item.value.domain_name is defined
        and item.value.dc_level is defined
        and item.value.domain_name != domain_name
        and item.value.domain_name != domain_trust_remote_domain_name
        and '.'.join(item.value.domain_name.split('.')[1:]) != domain_name
        and item.value.domain_name != '.'.join(domain_name.split('.')[1:])

#    - name: Print transitive_trusts_domains
#       ansible.builtin.debug:
#        msg:
#          - "{{ item[1] }}"
#          - "{{ item[0] }}"
#      loop: "{{ transitive_trusts_domains }}"
#      when: transitive_trusts_domains is defined


# - name: "COMPUTE SCCM ON DC"
#   hosts: dc
#   tags: mandatory
#   max_fail_percentage: 0
#   gather_facts: no
#   tasks:
#     - name:
#       no_log: true
#       ansible.builtin.set_fact:
#         transitive_trusts_domains: "{{ transitive_trusts_domains | default([]) + [[ item.key, item.value.domain_name ]]  }}"
#       with_dict: "{{  hostvars  }}"
#       when: item.value.domain_name is defined and
#         item.value.domain_name != domain_name
#         and item.value.domain_name != domain_trust_remote_domain_name
#         and '.'.join(item.value.domain_name.split('.')[1:]) != domain_name
#         and item.value.domain_name != '.'.join(domain_name.split('.')[1:])
