---
- name: "COMPUTE DOMAIN INFO ON EACH HOST"
  hosts: domain
  max_fail_percentage: 0
#  gather_facts: no
  tasks: 
    - name: Check Product name
      win_shell: |
        $ProductName = Get-ItemProperty -Path "HKLM:/Software/Microsoft/Windows NT/CurrentVersion" | Select-Object -ExpandProperty "ProductName"
        Return $ProductName
      register: product_name
    - name: register is_server_os
      ansible.builtin.set_fact: 
        is_server_os: "{{product_name.stdout_lines[0] is search('Windows Server')}}"       
    - name: Check InstallationType
      win_shell: |
        $InstallationType = Get-ItemProperty -Path "HKLM:/Software/Microsoft/Windows NT/CurrentVersion" | Select-Object -ExpandProperty "InstallationType"
        Return $InstallationType -eq "Server Core"
      register: is_server_core
    - name: register is_core_install
      ansible.builtin.set_fact: 
        is_core_install: "{{ is_server_core.stdout_lines[0] }}"      
    - name: compute domain dc on all hosts
      ansible.builtin.set_fact:
        domain_dc_ip: "{{hostvars[domain_dc_ansible_inventory_key].ansible_host}}"
        domain_dc_name: "{{hostvars[domain_dc_ansible_inventory_key].hostname}}"
    - name: compute domain info on non DC
      ansible.builtin.set_fact:
        domain_name:  "{{hostvars[domain_dc_ansible_inventory_key].domain_name}}"
        domain_password: "{{hostvars[domain_dc_ansible_inventory_key].domain_password}}"
        domain_netbios_name: "{{hostvars[domain_dc_ansible_inventory_key].domain_netbios_name}}"
        domain_gmsa: "{{hostvars[domain_dc_ansible_inventory_key].domain_gmsa}}"
        laps_path: "{{hostvars[domain_dc_ansible_inventory_key].laps_path}}"
        path: "{{hostvars[domain_dc_ansible_inventory_key].domain_real_computers[hostname].path}}"
      when: inventory_hostname not in groups['dc']
#    - name: print host configuration
#      debug:
#        msg: 
#          - "domain_password: {{domain_password}}"
#          - "domain_name: {{domain_name}}"
#          - "domain_netbios_name: {{domain_netbios_name}}"
#          - "domain_dc_ip: {{domain_dc_ip}}"
#          - "domain_dc_name: {{domain_dc_name}}"
#          - "domain_gmsa: {{domain_gmsa}}"
#          - "laps_path: {{laps_path}}"
#          - "path: {{path}}"
#

- name: "COMPUTE PARENT DOMAIN INFO ON EACH CHILD DC"
  hosts: dc
  max_fail_percentage: 0
  gather_facts: no
  tasks:
    - name: Compute parent domain name on chid DC 
      ansible.builtin.set_fact:
        domain_parent_domain_name: "{{'.'.join(domain_name.split('.')[1:])}}"
        cacheable: yes
      when: dc_level != 0
    - name: Compute parent domain infos on chid DC
      ansible.builtin.set_fact:
        domain_parent_domain_password: "{{hostvars[parent_domain_dc_ansible_inventory_key].domain_password}}"
        domain_parent_dc_name: "{{hostvars[parent_domain_dc_ansible_inventory_key].hostname}}"
        domain_parent_dc_ip: "{{hostvars[parent_domain_dc_ansible_inventory_key].ansible_host}}"
        domain_parent_domain_name: "{{hostvars[parent_domain_dc_ansible_inventory_key].domain_name}}"
        cacheable: yes
      when: dc_level != 0
#    - name: print parent domain info
#      debug:
#        msg: 
#          - "domain_parent_domain_name: {{domain_parent_domain_name}}"
#          - "domain_parent_domain_password: {{domain_parent_domain_password}}"
#          - "domain_parent_dc_name: {{domain_parent_dc_name}}"
#          - "domain_parent_dc_ip: {{domain_parent_dc_ip}}"
#      when: dc_level != 0

- name: "COMPUTE CHILD DOMAIN INFO ON EACH DC"
  hosts: dc
  max_fail_percentage: 0
  gather_facts: no
  tasks:
    - name: Compute child domain names on parent DC
      no_log: true
      ansible.builtin.set_fact:
        child_domains: "{{child_domains | default([]) + [[ item.key, item.value.hostname, item.value.domain_name ]] }}" 
      with_dict: "{{ hostvars }}"
      when: item.value.domain_parent_domain_name is defined and domain_name == item.value.domain_parent_domain_name
#    - name: print child_domains
#      debug:
#        msg: 
#          - "{{item[1]}}.{{item[2]}}"
#          - "{{hostvars[item[0]].ansible_host}}"
#      loop: "{{child_domains}}"
#      when: child_domains is defined 


- name: "COMPUTE TRUST DOMAIN INFO ON EACH DC"
  hosts: trust
  max_fail_percentage: 0
  gather_facts: no
  tasks:
    - name: Compute trusted domain infos on DC
      set_fact:
        domain_trust_remote_dc_name: "{{hostvars[trust_domain_dc_ansible_inventory_key].hostname}}"
        domain_trust_remote_dc_ip: "{{hostvars[trust_domain_dc_ansible_inventory_key].ansible_host}}"       
        domain_trust_remote_domain_name: "{{hostvars[trust_domain_dc_ansible_inventory_key].domain_name}}"
        domain_trust_remote_domain_password: "{{hostvars[trust_domain_dc_ansible_inventory_key].domain_password}}"
        cacheable: yes
#    - name: print trused domain info
#      debug:
#        msg: 
#          - "domain_trust_remote_dc_name: {{domain_trust_remote_dc_name}}"
#          - "domain_trust_remote_dc_ip: {{domain_trust_remote_dc_ip}}"
#          - "domain_trust_remote_domain_name: {{domain_trust_remote_domain_name}}"
#          - "domain_trust_remote_domain_password: {{domain_trust_remote_domain_password}}"
#          - "domain_name: {{domain_name}}"



- name: "COMPUTE TRANSITIVE TRUSTED DOMAINS"
  hosts: trust
  max_fail_percentage: 0
  gather_facts: no
  tasks:
    - name: Compute transitive trusted domains
      no_log: true
      ansible.builtin.set_fact:
        transitive_trusts_domains: "{{transitive_trusts_domains | default([]) + [[ item.key, item.value.domain_name ]] }}" 
      with_dict: "{{ hostvars }}"
      when: item.value.domain_name is defined and
        item.value.domain_name != domain_name                           
        and item.value.domain_name != domain_trust_remote_domain_name       
        and '.'.join(item.value.domain_name.split('.')[1:]) != domain_name  
        and item.value.domain_name != '.'.join(domain_name.split('.')[1:])  
        # same domain
        # trusted domain
        # child domain
        # parent domain

#    - name: print transitive_trusts_domains
#      debug:
#        msg: 
#          - "{{item[1]}}"
#          - "{{hostvars[item[0]].ansible_host}}"
#      loop: "{{transitive_trusts_domains}}"
#      when: transitive_trusts_domains is defined 
